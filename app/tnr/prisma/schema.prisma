// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

//*****************************//
//****** USER AUTH MODEL ******//
//*****************************//

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    MODERATOR
    ADMIN
}

model User {
    id               String             @id @default(cuid())
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String?            @db.Text
    isBanned         Boolean            @default(false)
    role             Role               @default(USER)
    accounts         Account[]
    sessions         Session[]
    userdata         UserData?
    attributes       UserAttribute[]
    HistoricalAvatar HistoricalAvatar[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum FederalStatus {
    NONE
    NORMAL
    SILVER
    GOLD
}

model UserData {
    userId                  String                @unique
    user                    User                  @relation(fields: [userId], references: [id])
    username                String                @unique
    // Statistics    
    gender                  String
    // Bars
    cur_health              Int                   @default(100)
    max_health              Int                   @default(100)
    cur_chakra              Int                   @default(100)
    max_chakra              Int                   @default(100)
    cur_stamina             Int                   @default(100)
    max_stamina             Int                   @default(100)
    regeneration            Int                   @default(100)
    // Financials
    money                   Int                   @default(100)
    bank                    Int                   @default(100)
    // Experience
    experience              Int                   @default(0)
    pvp_experience          Int                   @default(0)
    // Rank & Village
    rank                    String                @default("Student")
    level                   Int                   @default(1)
    villageId               String?
    village                 Village?              @relation(fields: [villageId], references: [id])
    bloodlineId             String?
    bloodline               Bloodline?            @relation(fields: [bloodlineId], references: [id])
    // Generals
    status                  String                @default("Awake")
    strength                Int                   @default(10)
    intelligence            Int                   @default(10)
    willpower               Int                   @default(10)
    speed                   Int                   @default(10)
    // Specialities
    ninjutsu_offence        Int                   @default(10)
    ninjutsu_defence        Int                   @default(10)
    genjutsu_offence        Int                   @default(10)
    genjutsu_defence        Int                   @default(10)
    taijutsu_offence        Int                   @default(10)
    taijutsu_defence        Int                   @default(10)
    weapon_offence          Int                   @default(10)
    weapon_defence          Int                   @default(10)
    // Purchase Points
    reputation_points       Int                   @default(0)
    reputation_points_total Int                   @default(0)
    popularity_points       Int                   @default(6) // Required for initial avatar creation    
    popularity_points_total Int                   @default(6) // Required for initial avatar creation
    federalStatus           FederalStatus         @default(NONE)
    // Approved ToS
    approved_tos            Boolean               @default(false)
    // Avatar link
    avatar                  String?
    // Timers
    createdAt               DateTime              @default(now())
    updatedAt               DateTime              @default(now()) @updatedAt
    deletionAt              DateTime?
    // Relations
    BugReport               BugReport[]
    BugVotes                BugVotes[]
    filedInfractions        UserReport[]          @relation("reporter")
    receivedInfractions     UserReport[]          @relation("reported")
    reportComments          UserReportComment[]
    ForumPost               ForumPost[]
    ForumThread             ForumThread[]
    Conversation            Conversation[]
    ConversationComment     ConversationComment[]
    UsersInConversation     UsersInConversation[]
    logsAsTarget            ReportLog[]           @relation("target")
    logsAsStaff             ReportLog[]           @relation("staff")
    receivedTransactions    PaypalTransaction[]   @relation("receivedTransactions")
    paidTransactions        PaypalTransaction[]   @relation("paidTransactions")
    paidSubscriptions       PaypalSubscription[]  @relation("paidSubscriptions")
    receivedSubscriptions   PaypalSubscription[]  @relation("receivedSubscriptions")
}

model UserAttribute {
    id        String @id @default(cuid())
    attribute String
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@unique([attribute, userId])
}

model HistoricalAvatar {
    id        Int      @id @default(autoincrement())
    avatar    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    userId    String
}

//*****************************//
//********* OTHER ***********//
//*****************************//

model Village {
    id        String     @id @default(cuid())
    name      String     @unique
    longitude Int
    latitude  Int
    sector    Int        @default(1)
    UserData  UserData[]
}

model Bloodline {
    id       String     @id @default(cuid())
    name     String     @unique
    UserData UserData[]
}

//*****************************//
//*********  SOCIAL ***********//
//*****************************//

model BugReport {
    id             String       @id @default(cuid())
    title          String
    content        String       @db.Text
    summary        String       @default("No summary provided")
    system         String
    user           UserData     @relation(fields: [userId], references: [userId], onDelete: Cascade)
    createdAt      DateTime     @default(now())
    userId         String
    is_resolved    Boolean      @default(false)
    popularity     Int          @default(0)
    votes          BugVotes[]
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String       @unique
}

model BugVotes {
    id        String    @id @default(cuid())
    bug       BugReport @relation(fields: [bugId], references: [id], onDelete: Cascade)
    user      UserData  @relation(fields: [userId], references: [userId], onDelete: Cascade)
    createdAt DateTime  @default(now())
    value     Int       @db.TinyInt
    bugId     String
    userId    String

    @@unique([bugId, userId])
}

enum ReportAction {
    UNVIEWED
    REPORT_CLEARED
    BAN_ACTIVATED
    BAN_ESCALATED
}

model ReportLog {
    id           String    @id @default(cuid())
    target       UserData? @relation("target", fields: [targetUserId], references: [userId])
    targetUserId String?
    staff        UserData? @relation("staff", fields: [staffUserId], references: [userId])
    staffUserId  String?
    createdAt    DateTime  @default(now())
    action       String
}

model UserReport {
    id             String              @id @default(cuid())
    reporterUser   UserData?           @relation("reporter", fields: [reporterUserId], references: [userId], onDelete: SetNull)
    reporterUserId String?
    reportedUser   UserData?           @relation("reported", fields: [reportedUserId], references: [userId], onDelete: SetNull)
    reportedUserId String?
    createdAt      DateTime            @default(now())
    system         String
    infraction     Json
    reason         String
    banEnd         DateTime?
    adminResolved  Boolean             @default(false)
    status         ReportAction        @default(UNVIEWED)
    comments       UserReportComment[]
}

model UserReportComment {
    id        String        @id @default(cuid())
    content   String
    createdAt DateTime      @default(now())
    user      UserData      @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId    String
    report    UserReport    @relation(fields: [reportId], references: [id], onDelete: Cascade)
    reportId  String
    decision  ReportAction?
}

model ForumBoard {
    id        String        @id @default(cuid())
    name      String        @unique
    summary   String        @db.Text
    group     String
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    nPosts    Int           @default(0)
    nThreads  Int           @default(0)
    threads   ForumThread[]
}

model ForumThread {
    id        String      @id @default(cuid())
    title     String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    board     ForumBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)
    boardId   String
    user      UserData    @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId    String
    nPosts    Int         @default(0)
    isPinned  Boolean     @default(false)
    isLocked  Boolean     @default(false)
    posts     ForumPost[]
}

model ForumPost {
    id        String      @id @default(cuid())
    content   String      @db.Text
    createdAt DateTime    @default(now())
    user      UserData    @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId    String
    thread    ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
    threadId  String
}

model Conversation {
    id                  String                @id @default(cuid())
    title               String?               @unique
    createdBy           UserData?             @relation(fields: [createdById], references: [userId], onDelete: Cascade)
    createdById         String?
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    isLocked            Boolean               @default(false)
    isPublic            Boolean               @default(true)
    messages            ConversationComment[]
    BugReport           BugReport[]
    UsersInConversation UsersInConversation[]
}

model ConversationComment {
    id             String        @id @default(cuid())
    content        String        @db.Text
    createdAt      DateTime      @default(now())
    user           UserData      @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId         String
    conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String?
    isPinned       Boolean       @default(false)
}

model UsersInConversation {
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String
    user           UserData     @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId         String
    assignedAt     DateTime     @default(now())

    @@id([conversationId, userId])
}

//*****************************//
//*********  PAYPAL ***********//
//*****************************//

model PaypalTransaction {
    id                     String   @id @default(cuid())
    createdBy              UserData @relation("paidTransactions", fields: [createdById], references: [userId], onDelete: Cascade)
    createdById            String
    affectedUser           UserData @relation("receivedTransactions", fields: [affectedUserId], references: [userId], onDelete: Cascade)
    affectedUserId         String
    transactionId          String
    transactionUpdatedDate String
    orderId                String?  @unique
    invoiceId              String?
    createdAt              DateTime @default(now())
    updatedAt              DateTime @updatedAt
    amount                 Float    @default(0)
    reputationPoints       Int      @default(0)
    currency               String   @default("USD")
    status                 String
    rawData                Json
}

model PaypalSubscription {
    id             String        @id @default(cuid())
    createdBy      UserData      @relation("paidSubscriptions", fields: [createdById], references: [userId], onDelete: Cascade)
    createdById    String
    affectedUser   UserData      @relation("receivedSubscriptions", fields: [affectedUserId], references: [userId], onDelete: Cascade)
    affectedUserId String
    status         String
    federalStatus  FederalStatus
    orderId        String?       @unique
    subscriptionId String        @unique
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
}

model PaypalWebhookMessage {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    eventType String
    rawData   Json
    handled   Boolean  @default(false)
}
