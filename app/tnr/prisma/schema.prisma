// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

//************************//
//****** DEPRECATED ******//
//************************//

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//*****************************//
//****** USER AUTH MODEL ******//
//*****************************//

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    MODERATOR
    ADMIN
}

model User {
    id               String             @id @default(cuid())
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String?
    role             Role               @default(USER)
    accounts         Account[]
    sessions         Session[]
    userdata         UserData?
    attributes       UserAttribute[]
    HistoricalAvatar HistoricalAvatar[]
}

model UserData {
    userId            String       @unique
    user              User         @relation(fields: [userId], references: [id])
    username          String       @unique
    // Statistics    
    gender            String
    // Bars
    cur_health        Int          @default(100)
    max_health        Int          @default(100)
    cur_chakra        Int          @default(100)
    max_chakra        Int          @default(100)
    cur_stamina       Int          @default(100)
    max_stamina       Int          @default(100)
    regeneration      Int          @default(100)
    // Financials
    money             Int          @default(100)
    bank              Int          @default(100)
    // Experience
    experience        Int          @default(0)
    pvp_experience    Int          @default(0)
    // Rank & Village
    rank              String       @default("Student")
    level             Int          @default(1)
    villageId         String?
    village           Village?     @relation(fields: [villageId], references: [id])
    bloodlineId       String?
    bloodline         Bloodline?   @relation(fields: [bloodlineId], references: [id])
    // Generals
    status            String       @default("Awake")
    strength          Int          @default(10)
    intelligence      Int          @default(10)
    willpower         Int          @default(10)
    speed             Int          @default(10)
    // Specialities
    ninjutsu_offence  Int          @default(10)
    ninjutsu_defence  Int          @default(10)
    genjutsu_offence  Int          @default(10)
    genjutsu_defence  Int          @default(10)
    taijutsu_offence  Int          @default(10)
    taijutsu_defence  Int          @default(10)
    weapon_offence    Int          @default(10)
    weapon_defence    Int          @default(10)
    // Purchase Points
    reputation_points Int          @default(0)
    popularity_points Int          @default(1) // Required for initial avatar creation
    // Approved ToS
    approved_tos      Boolean      @default(false)
    // Avatar link
    avatar            String?
    // Relations
    BugReport         BugReport[]
    BugVotes          BugVotes[]
    BugComment        BugComment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserAttribute {
    id        String @id @default(cuid())
    attribute String
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model HistoricalAvatar {
    id        Int      @id @default(autoincrement())
    avatar    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    userId    String
}

//*****************************//
//********* OTHER ***********//
//*****************************//

model Village {
    id        String     @id @default(cuid())
    name      String     @unique
    longitude Int
    latitude  Int
    sector    Int        @default(1)
    UserData  UserData[]
}

model Bloodline {
    id       String     @id @default(cuid())
    name     String     @unique
    UserData UserData[]
}

//*****************************//
//*********  SOCIAL ***********//
//*****************************//

model BugReport {
    id          String       @id @default(cuid())
    title       String
    description String       @db.Text
    summary     String       @default("No summary provided")
    system      String
    user        UserData     @relation(fields: [userId], references: [userId], onDelete: Cascade)
    createdAt   DateTime     @default(now())
    userId      String
    is_resolved Boolean      @default(false)
    popularity  Int          @default(0)
    votes       BugVotes[]
    comments    BugComment[]
}

model BugVotes {
    id        String    @id @default(cuid())
    bug       BugReport @relation(fields: [bugId], references: [id], onDelete: Cascade)
    user      UserData  @relation(fields: [userId], references: [userId], onDelete: Cascade)
    createdAt DateTime  @default(now())
    value     Int       @db.TinyInt
    bugId     String
    userId    String

    @@unique([bugId, userId])
}

model BugComment {
    id        String    @id @default(cuid())
    content   String    @db.Text
    createdAt DateTime  @default(now())
    user      UserData  @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId    String
    bug       BugReport @relation(fields: [bugId], references: [id], onDelete: Cascade)
    bugId     String
}
