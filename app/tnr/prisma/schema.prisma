// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

//*****************************//
//********* USER MODEL ********//
//*****************************//

enum Role {
    USER
    MODERATOR
    ADMIN
}

enum FederalStatus {
    NONE
    NORMAL
    SILVER
    GOLD
}

enum UserStatus {
    AWAKE
    TRAVEL
    BATTLE
}

enum UserRank {
    STUDENT
    GENIN
    CHUNIN
    JONIN
    COMMANDER
    ELDER
}

model UserData {
    userId                  String                @unique
    username                String                @unique
    isBanned                Boolean               @default(false)
    isAI                    Boolean               @default(false)
    role                    Role                  @default(USER)
    // Statistics    
    gender                  String
    // Bars
    cur_health              Int                   @default(100)
    max_health              Int                   @default(100)
    cur_chakra              Int                   @default(100)
    max_chakra              Int                   @default(100)
    cur_stamina             Int                   @default(100)
    max_stamina             Int                   @default(100)
    regeneration            Int                   @default(100)
    // Financials
    money                   Int                   @default(100)
    bank                    Int                   @default(100)
    // Experience
    experience              Int                   @default(0)
    pvp_experience          Int                   @default(0)
    // Rank & Village
    rank                    UserRank              @default(STUDENT)
    level                   Int                   @default(1)
    villageId               String?
    village                 Village?              @relation(fields: [villageId], references: [id])
    bloodlineId             String?
    bloodline               Bloodline?            @relation(fields: [bloodlineId], references: [id])
    // Generals
    status                  UserStatus            @default(AWAKE)
    strength                Int                   @default(10)
    intelligence            Int                   @default(10)
    willpower               Int                   @default(10)
    speed                   Int                   @default(10)
    // Specialities
    ninjutsu_offence        Int                   @default(10)
    ninjutsu_defence        Int                   @default(10)
    genjutsu_offence        Int                   @default(10)
    genjutsu_defence        Int                   @default(10)
    taijutsu_offence        Int                   @default(10)
    taijutsu_defence        Int                   @default(10)
    bukijutsu_offence       Int                   @default(10)
    bukijutsu_defence       Int                   @default(10)
    // Purchase Points
    reputation_points       Int                   @default(0)
    reputation_points_total Int                   @default(0)
    popularity_points       Int                   @default(6) // Required for initial avatar creation    
    popularity_points_total Int                   @default(6) // Required for initial avatar creation
    federalStatus           FederalStatus         @default(NONE)
    // Approved ToS
    approved_tos            Boolean               @default(false)
    // Avatar link
    avatar                  String?
    // Location
    sector                  Int                   @default(0)
    longitude               Int                   @default(10)
    latitude                Int                   @default(7)
    location                String                @default("")
    // Timers
    createdAt               DateTime              @default(now())
    updatedAt               DateTime              @default(now()) @updatedAt
    deletionAt              DateTime?
    travelFinishAt          DateTime?
    // Jutsus & items
    items                   UserItem[]
    jutsus                  UserJutsu[]
    // Relations
    BugReport               BugReport[]
    BugVotes                BugVotes[]
    filedInfractions        UserReport[]          @relation("reporter")
    receivedInfractions     UserReport[]          @relation("reported")
    reportComments          UserReportComment[]
    ForumPost               ForumPost[]
    ForumThread             ForumThread[]
    Conversation            Conversation[]
    ConversationComment     ConversationComment[]
    UsersInConversation     UsersInConversation[]
    logsAsTarget            ReportLog[]           @relation("target")
    logsAsStaff             ReportLog[]           @relation("staff")
    receivedTransactions    PaypalTransaction[]   @relation("receivedTransactions")
    paidTransactions        PaypalTransaction[]   @relation("paidTransactions")
    paidSubscriptions       PaypalSubscription[]  @relation("paidSubscriptions")
    receivedSubscriptions   PaypalSubscription[]  @relation("receivedSubscriptions")
    UserAttribute           UserAttribute[]
    HistoricalAvatar        HistoricalAvatar[]
    battle                  Battle?               @relation(fields: [battleId], references: [id])
    battleId                String?
    battleActions           BattleAction[]

    @@index([battleId])
    @@index([bloodlineId])
    @@index([villageId])
    @@index([userId])
}

model UserAttribute {
    id        String   @id @default(cuid())
    attribute String
    user      UserData @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId    String

    @@unique([attribute, userId])
    @@index([userId])
}

model HistoricalAvatar {
    id          Int      @id @default(autoincrement())
    replicateId String?  @unique
    avatar      String?  @unique
    status      String   @default("started")
    done        Boolean  @default(false)
    user        UserData @relation(fields: [userId], references: [userId], onDelete: Cascade)
    updatedAt   DateTime @default(now()) @updatedAt
    createdAt   DateTime @default(now())
    userId      String

    @@index([userId])
    @@index([replicateId])
    @@index([avatar])
}

//*****************************//
//********* OTHER ***********//
//*****************************//

model Village {
    id                String             @id @default(cuid())
    name              String             @unique
    sector            Int                @unique @default(1)
    UserData          UserData[]
    VillageStructures VillageStructure[]
    Jutsu             Jutsu[]
}

model VillageStructure {
    id        String  @id @default(cuid())
    name      String
    image     String
    village   Village @relation(fields: [villageId], references: [id], onDelete: Cascade)
    villageId String
    level     Int     @default(1)
    max_level Int     @default(10)
    cur_sp    Int     @default(100)
    max_sp    Int     @default(100)

    @@unique([name, villageId])
    @@index([villageId])
}

//*****************************//
//*********  SOCIAL ***********//
//*****************************//

model BugReport {
    id             String       @id @default(cuid())
    title          String
    content        String       @db.Text
    summary        String       @default("No summary provided")
    system         String
    user           UserData     @relation(fields: [userId], references: [userId], onDelete: Cascade)
    createdAt      DateTime     @default(now())
    userId         String
    is_resolved    Boolean      @default(false)
    popularity     Int          @default(0)
    votes          BugVotes[]
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String       @unique

    @@index([userId])
}

model BugVotes {
    id        String    @id @default(cuid())
    bug       BugReport @relation(fields: [bugId], references: [id], onDelete: Cascade)
    user      UserData  @relation(fields: [userId], references: [userId], onDelete: Cascade)
    createdAt DateTime  @default(now())
    value     Int       @db.TinyInt
    bugId     String
    userId    String

    @@unique([bugId, userId])
    @@index([userId])
}

enum ReportAction {
    UNVIEWED
    REPORT_CLEARED
    BAN_ACTIVATED
    BAN_ESCALATED
}

model ReportLog {
    id           String    @id @default(cuid())
    target       UserData? @relation("target", fields: [targetUserId], references: [userId])
    targetUserId String?
    staff        UserData? @relation("staff", fields: [staffUserId], references: [userId])
    staffUserId  String?
    createdAt    DateTime  @default(now())
    action       String

    @@index([targetUserId])
    @@index([staffUserId])
}

model UserReport {
    id             String              @id @default(cuid())
    reporterUser   UserData?           @relation("reporter", fields: [reporterUserId], references: [userId], onDelete: SetNull)
    reporterUserId String?
    reportedUser   UserData?           @relation("reported", fields: [reportedUserId], references: [userId], onDelete: SetNull)
    reportedUserId String?
    createdAt      DateTime            @default(now())
    system         String
    infraction     Json
    reason         String
    banEnd         DateTime?
    adminResolved  Boolean             @default(false)
    status         ReportAction        @default(UNVIEWED)
    comments       UserReportComment[]

    @@index([reporterUserId])
    @@index([reportedUserId])
}

model UserReportComment {
    id        String        @id @default(cuid())
    content   String
    createdAt DateTime      @default(now())
    user      UserData      @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId    String
    report    UserReport    @relation(fields: [reportId], references: [id], onDelete: Cascade)
    reportId  String
    decision  ReportAction?

    @@index([userId])
    @@index([reportId])
}

model ForumBoard {
    id        String        @id @default(cuid())
    name      String        @unique
    summary   String        @db.Text
    group     String
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    nPosts    Int           @default(0)
    nThreads  Int           @default(0)
    threads   ForumThread[]
}

model ForumThread {
    id        String      @id @default(cuid())
    title     String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    board     ForumBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)
    boardId   String
    user      UserData    @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId    String
    nPosts    Int         @default(0)
    isPinned  Boolean     @default(false)
    isLocked  Boolean     @default(false)
    posts     ForumPost[]

    @@index([boardId])
    @@index([userId])
}

model ForumPost {
    id        String      @id @default(cuid())
    content   String      @db.Text
    createdAt DateTime    @default(now())
    user      UserData    @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId    String
    thread    ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
    threadId  String

    @@index([userId])
    @@index([threadId])
}

model Conversation {
    id                  String                @id @default(cuid())
    title               String?               @unique
    createdBy           UserData?             @relation(fields: [createdById], references: [userId], onDelete: Cascade)
    createdById         String?
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    isLocked            Boolean               @default(false)
    isPublic            Boolean               @default(true)
    messages            ConversationComment[]
    BugReport           BugReport[]
    UsersInConversation UsersInConversation[]

    @@index([createdById])
}

model ConversationComment {
    id             String        @id @default(cuid())
    content        String        @db.Text
    createdAt      DateTime      @default(now())
    user           UserData      @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId         String
    conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String?
    isPinned       Boolean       @default(false)

    @@index([userId])
    @@index([conversationId])
}

model UsersInConversation {
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String
    user           UserData     @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId         String
    assignedAt     DateTime     @default(now())

    @@id([conversationId, userId])
    @@index([userId])
    @@index([conversationId])
}

//*************************************//
//* ENUMS FOR ITEMS/JUTSUS/BLOODLINES *//
//*************************************//

enum LetterRank {
    D
    C
    B
    A
    S
}

enum AttackTarget {
    SELF
    OPPONENT
    GROUND
}

enum JutsuType {
    NORMAL
    SPECIAL
    BLOODLINE
    FORBIDDEN
    LOYALTY
    CLAN
    EVENT
}

enum ItemType {
    WEAPON
    CONSUMABLE
    ARMOR
    ACCESSORY
    MATERIAL
    EVENT
    OTHER
}

enum WeaponType {
    STAFF
    AXE
    FIST_WEAPON
    SHURIKEN
    SICKLE
    DAGGER
    SWORD
    POLEARM
    FLAIL
    CHAIN
    FAN
    BOW
    HAMMER
}

enum ItemRarity {
    COMMON
    RARE
    EPIC
    LEGENDARY
}

enum ItemSlotType {
    HEAD
    CHEST
    LEGS
    FEET
    HAND
    ITEM
}

enum ItemSlot {
    HEAD
    CHEST
    LEGS
    FEET
    HAND_1
    HAND_2
    ITEM_1
    ITEM_2
    ITEM_3
    ITEM_4
    ITEM_5
    ITEM_6
    ITEM_7
}

//*****************************//
//*********  JUTSUS ***********//
//*****************************//

model Jutsu {
    id                String       @id @default(cuid())
    name              String       @unique
    image             String       @unique
    description       String       @db.Text
    battleDescription String       @db.Text
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    jutsuWeapon       WeaponType?
    jutsuType         JutsuType
    jutsuRank         LetterRank   @default(D)
    requiredRank      UserRank
    target            AttackTarget
    range             Int
    cooldown          Int          @default(0)
    healthCostPerc    Float        @default(0)
    chakraCostPerc    Float        @default(0.05)
    staminaCostPerc   Float        @default(0)
    bloodline         Bloodline?   @relation(fields: [bloodlineId], references: [id])
    bloodlineId       String?
    village           Village?     @relation(fields: [villageId], references: [id])
    villageId         String?
    effects           Json
    UserJutsu         UserJutsu[]

    @@index([villageId])
    @@index([bloodlineId])
}

model UserJutsu {
    id             String    @id @default(cuid())
    user           UserData  @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId         String
    jutsu          Jutsu     @relation(fields: [jutsuId], references: [id], onDelete: Cascade)
    jutsuId        String
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    level          Int       @default(1)
    equipped       Boolean   @default(false)
    finishTraining DateTime?

    @@unique([userId, jutsuId])
    @@index([userId])
    @@index([jutsuId])
}

//*****************************//
//********* ITEMS *************//
//*****************************//

model Item {
    id              String       @id @default(cuid())
    name            String       @unique
    image           String       @unique
    description     String       @db.Text
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    canStack        Boolean      @default(false)
    stackSize       Int          @default(1)
    destroyOnUse    Boolean      @default(false)
    chakraCostPerc  Float        @default(0)
    staminaCostPerc Float        @default(0)
    cost            Int          @default(1)
    range           Int          @default(0)
    target          AttackTarget
    type            ItemType
    weaponType      WeaponType?
    rarity          ItemRarity
    slot            ItemSlotType
    effects         Json
    UserItem        UserItem[]
}

model UserItem {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      UserData  @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId    String
    item      Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId    String
    quantity  Int       @default(1)
    equipped  ItemSlot?

    @@index([userId])
    @@index([itemId])
}

//*****************************//
//******* BLOODLINES **********//
//*****************************//

model Bloodline {
    id            String     @id @default(cuid())
    name          String     @unique
    image         String     @unique
    description   String     @db.Text
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @default(now()) @updatedAt
    rank          LetterRank
    regenIncrease Int        @default(0)
    village       String
    effects       Json
    users         UserData[]
    jutsus        Jutsu[]

    @@index([village])
    @@index([rank])
}

//*****************************//
//*********  COMBAT ***********//
//*****************************//

enum BattleType {
    ARENA
    COMBAT
    SPARRING
}

model Battle {
    id           String         @id @default(cuid())
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    background   String
    battleType   BattleType
    users        UserData[]
    usersState   Json
    usersEffects Json
    actions      BattleAction[]
}

model BattleAction {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    battle      Battle   @relation(fields: [battleId], references: [id])
    battleId    String
    user        UserData @relation(fields: [userId], references: [userId])
    userId      String
    description String

    @@index([battleId])
    @@index([userId])
}

//*****************************//
//*********  PAYPAL ***********//
//*****************************//

model PaypalTransaction {
    id                     String   @id @default(cuid())
    createdBy              UserData @relation("paidTransactions", fields: [createdById], references: [userId], onDelete: Cascade)
    createdById            String
    affectedUser           UserData @relation("receivedTransactions", fields: [affectedUserId], references: [userId], onDelete: Cascade)
    affectedUserId         String
    transactionId          String
    transactionUpdatedDate String
    orderId                String?  @unique
    invoiceId              String?
    createdAt              DateTime @default(now())
    updatedAt              DateTime @updatedAt
    amount                 Float    @default(0)
    reputationPoints       Int      @default(0)
    currency               String   @default("USD")
    status                 String
    rawData                Json

    @@index([createdById])
    @@index([affectedUserId])
}

model PaypalSubscription {
    id             String        @id @default(cuid())
    createdBy      UserData      @relation("paidSubscriptions", fields: [createdById], references: [userId], onDelete: Cascade)
    createdById    String
    affectedUser   UserData      @relation("receivedSubscriptions", fields: [affectedUserId], references: [userId], onDelete: Cascade)
    affectedUserId String
    status         String
    federalStatus  FederalStatus
    orderId        String?       @unique
    subscriptionId String        @unique
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt

    @@index([createdById])
    @@index([affectedUserId])
}

model PaypalWebhookMessage {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    eventType String
    rawData   Json
    handled   Boolean  @default(false)
}
